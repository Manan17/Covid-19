{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","App.module.css","images/corona-image.png"],"names":["module","exports","Cards","data","confirmed","deaths","recovered","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","cx","cards","infected","xs","md","Typography","color","gutterBottom","variant","start","end","value","separator","duration","Date","toDateString","url","getData","country","a","changeUrl","axios","get","getDailyData","modifiedData","map","el","total","date","reportDate","getCountries","countries","names","name","Chart","useState","dailyData","setDailyData","useEffect","fetchDailyData","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountry","FormControl","NativeSelect","defaultValue","onChange","target","index","key","App","state","handleCountry","setState","fetchedData","this","src","coronaimage","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.074ae299.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__251T_\",\"cards\":\"Cards_cards__3qLiN\",\"infected\":\"Cards_infected__TQW0e\",\"recovered\":\"Cards_recovered__ldRPd\",\"deaths\":\"Cards_deaths__sCBjC\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = ({ data: { confirmed, deaths, recovered, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"Loading .....\";\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          className={cx(styles.cards, styles.infected)}\r\n          xs={12}\r\n          md={3}\r\n        >\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            Infected\r\n          </Typography>\r\n          <Typography variant=\"h5\">\r\n            <CountUp\r\n              start={0}\r\n              end={confirmed.value}\r\n              separator=\",\"\r\n              duration={1.5}\r\n            />\r\n          </Typography>\r\n          <Typography color=\"textSecondary\">\r\n            {new Date(lastUpdate).toDateString()}\r\n          </Typography>\r\n          <Typography variant=\"body2\">\r\n            Number of active cases of Covid-19\r\n          </Typography>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          className={cx(styles.cards, styles.recovered)}\r\n          xs={12}\r\n          md={3}\r\n        >\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            Recovored\r\n          </Typography>\r\n          <Typography variant=\"h5\">\r\n            <CountUp\r\n              start={0}\r\n              end={recovered.value}\r\n              separator=\",\"\r\n              duration={1.5}\r\n            />\r\n          </Typography>\r\n          <Typography color=\"textSecondary\">\r\n            {new Date(lastUpdate).toDateString()}\r\n          </Typography>\r\n          <Typography variant=\"body2\">\r\n            Number of recovered cases from Covid-19\r\n          </Typography>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          className={cx(styles.cards, styles.deaths)}\r\n          xs={12}\r\n          md={3}\r\n        >\r\n          <Typography color=\"textSecondary\" gutterBottom>\r\n            Deaths\r\n          </Typography>\r\n          <Typography variant=\"h5\">\r\n            <CountUp\r\n              start={0}\r\n              end={deaths.value}\r\n              separator=\",\"\r\n              duration={1.5}\r\n            />\r\n          </Typography>\r\n          <Typography color=\"textSecondary\">\r\n            {new Date(lastUpdate).toDateString()}\r\n          </Typography>\r\n          <Typography variant=\"body2\">\r\n            Number of deaths due to Covid-19\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\nexport const getData = async (country) => {\r\n  let changeUrl = url;\r\n  if (country && country !== \"global\") {\r\n    changeUrl = `${changeUrl}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { confirmed, deaths, recovered, lastUpdate },\r\n    } = await axios.get(changeUrl);\r\n\r\n    return { confirmed, deaths, recovered, lastUpdate };\r\n  } catch (error) {}\r\n};\r\n\r\nexport const getDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    const modifiedData = data.map((el) => ({\r\n      confirmed: el.confirmed.total,\r\n      deaths: el.deaths.total,\r\n      date: el.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const getCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n\r\n    const names = countries.map((el) => el.name);\r\n    return names;\r\n  } catch (error) {}\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchDailyData = async () => {\r\n      setDailyData(await getDailyData());\r\n    };\r\n    fetchDailyData();\r\n  });\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255, 0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255, 0, 0, 0.5)\",\r\n            ],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country && country !== \"global\" ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nimport { getCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchCountry = async () => {\r\n      setFetchedCountries(await getCountries());\r\n    };\r\n\r\n    fetchCountry();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(el) => handleCountryChange(el.target.value)}\r\n      >\r\n        <option value=\"global\">Global</option>\r\n        {fetchedCountries.map((country, index) => (\r\n          <option key={index} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from \"react\";\r\nimport Cards from \"./components/Cards/Cards\";\r\nimport Chart from \"./components/Chart/Chart\";\r\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\r\nimport styles from \"./App.module.css\";\r\nimport { getData } from \"./api\";\r\nimport coronaimage from \"./images/corona-image.png\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n  };\r\n  async componentDidMount() {\r\n    const fetchedData = await getData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleCountry = async (country) => {\r\n    const data = await getData(country);\r\n    this.setState({ data, country });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <img src={coronaimage} alt=\"COVID-19\"></img>\r\n        <Cards data={this.state.data} />\r\n        <CountryPicker handleCountryChange={this.handleCountry} />\r\n        <Chart data={this.state.data} country={this.state.country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1dDLv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3eEXW\"};","module.exports = __webpack_public_path__ + \"static/media/corona-image.d7265326.png\";"],"sourceRoot":""}